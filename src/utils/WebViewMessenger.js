/**
 * WebViewMessenger.js
 *
 * H·ªá th·ªëng giao ti·∫øp gi·ªØa game Phaser v√† webview b√™n ngo√†i
 * S·ª≠ d·ª•ng window.parent.postMessage ƒë·ªÉ g·ª≠i th√¥ng b√°o
 */

/**
 * Ki·ªÉm tra xem game c√≥ ƒëang ch·∫°y trong iframe kh√¥ng
 * @returns {boolean} True n·∫øu game ƒëang ch·∫°y trong iframe
 */
export function isRunningInIframe() {
  try {
    return window.self !== window.parent;
  } catch (e) {
    return true; // N·∫øu c√≥ l·ªói cross-origin, c√≥ th·ªÉ ƒëang trong iframe
  }
}

/**
 * G·ª≠i th√¥ng b√°o ƒë·∫øn trang web ch·ª©a iframe
 * @param {string} type - Lo·∫°i th√¥ng b√°o
 * @param {Object} data - D·ªØ li·ªáu k√®m theo
 */
export function sendMessageToParent(type, data = {}) {
  const message = {
    source: "phaser-robot-game",
    type,
    data,
    timestamp: Date.now(),
  };

  let sent = false;

  // 1) N·∫øu c√≥ Flutter JS channel (webview_flutter)
  if (window.PhaserChannel?.postMessage) {
    window.PhaserChannel.postMessage(JSON.stringify(message));
    sent = true;
  }

  // 2) Emit event qua PhaserChannel ƒë·ªÉ Flutter c√≥ th·ªÉ l·∫Øng nghe b·∫±ng .on()
  if (window.PhaserChannel?.emit) {
    window.PhaserChannel.emit(type, message.data);
    sent = true;
  }

  // 3) N·∫øu ƒëang ·ªü trong iframe ‚Üí g·ª≠i cho trang web parent
  if (isRunningInIframe && isRunningInIframe()) {
    window.parent.postMessage(message, "*"); // TODO: ƒë·∫∑t origin c·ª• th·ªÉ
    sent = true;
  }

  if (!sent) {
    console.log("üìù Would send (no bridge/iframe):", message);
  }

  return sent;
}

/**
 * G·ª≠i th√¥ng b√°o th·∫Øng ƒë·∫øn trang web ch·ª©a iframe
 * @param {Object} [victoryData] - D·ªØ li·ªáu v·ªÅ k·∫øt qu·∫£ th·∫Øng (v√≠ d·ª•: { score })
 */
export function sendVictoryMessage(victoryData = {}) {
  return sendMessageToParent("VICTORY", { isVictory: true, ...victoryData });
}

/**
 * G·ª≠i th√¥ng b√°o ti·∫øn ƒë·ªô ƒë·∫øn trang web ch·ª©a iframe
 * @param {Object} progressData - D·ªØ li·ªáu v·ªÅ ti·∫øn ƒë·ªô
 */
export function sendProgressMessage(progressData) {
  return sendMessageToParent("PROGRESS", progressData);
}

/**
 * G·ª≠i th√¥ng b√°o thua ƒë·∫øn trang web ch·ª©a iframe
 * @param {Object} loseData - D·ªØ li·ªáu v·ªÅ thua cu·ªôc
 * @param {string} loseData.reason - L√Ω do thua (v√≠ d·ª•: "OUT_OF_BATTERY", "COLLISION", "OUT_OF_BOUNDS", "TIMEOUT")
 * @param {string} [loseData.message] - Th√¥ng b√°o chi ti·∫øt v·ªÅ l√Ω do thua
 * @param {Object} [loseData.details] - Th√¥ng tin b·ªï sung v·ªÅ l√Ω do thua
 */
export function sendLoseMessage(loseData = {}) {
  return sendMessageToParent("LOSE", {
    isVictory: false,
    reason: loseData.reason || "UNKNOWN",
    message: loseData.message || "Game over",
    details: loseData.details || {},
  });
}

/**
 * G·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn trang web ch·ª©a iframe
 * @param {Object} errorData - D·ªØ li·ªáu v·ªÅ l·ªói
 */
export function sendErrorMessage(errorData) {
  return sendMessageToParent("ERROR", errorData);
}

/**
 * L·∫Øng nghe th√¥ng ƒëi·ªáp t·ª´ parent (postMessage) v√† t·ª´ PhaserChannel (emit)
 * @param {Function} callback - H√†m x·ª≠ l√Ω th√¥ng ƒëi·ªáp nh·∫≠n ƒë∆∞·ª£c
 * @param {Object} [options]
 * @param {string[]} [options.allowedOrigins=[]] - Whitelist origin cho postMessage
 * @param {string[]} [options.channelEvents=["*"]] - C√°c s·ª± ki·ªán mu·ªën nghe t·ª´ PhaserChannel (m·∫∑c ƒë·ªãnh wildcard)
 * @param {number}   [options.waitMs=5000] - Th·ªùi gian ch·ªù PhaserChannel s·∫µn s√†ng
 * @param {number}   [options.pollMs=100]  - T·∫ßn su·∫•t ki·ªÉm tra PhaserChannel
 * @returns {Function} cleanup - g·ªçi ƒë·ªÉ g·ª° t·∫•t c·∫£ listener
 */
export function setupMessageListener(callback, options = {}) {
  const {
    allowedOrigins = [],
    channelEvents = ["*"],
    waitMs = 5000,
    pollMs = 100,
  } = options;

  // --- 1) Listener cho postMessage t·ª´ parent website ---
  const messageHandler = (event) => {
    try {
      // B·∫£o m·∫≠t origin (n·∫øu c·∫•u h√¨nh)
      if (Array.isArray(allowedOrigins) && allowedOrigins.length > 0) {
        if (!allowedOrigins.includes(event.origin)) return; // B·ªè qua ngu·ªìn l·∫°
      }

      const message = event.data;
      // Ch·ªâ nh·∫≠n ƒë√∫ng schema mong mu·ªën t·ª´ parent website
      if (message && message.source === "parent-website") {
        // Chu·∫©n ho√° payload cho ƒë·ªìng nh·∫•t
        const normalized = {
          source: "parent-website",
          type: message.type,
          data: message.data,
          timestamp:
            typeof message.timestamp === "number"
              ? message.timestamp
              : Date.now(),
          _raw: message,
        };
        if (typeof callback === "function") callback(normalized);
      }
    } catch (e) {
      console.error("‚ùå Error processing message from parent:", e);
    }
  };
  window.addEventListener("message", messageHandler);

  // --- 2) Listener cho s·ª± ki·ªán ƒëi v√†o t·ª´ PhaserChannel ---
  const offFns = [];
  let pollId = null;
  let timeoutId = null;

  const attachPhaserChannelListeners = (pc) => {
    try {
      if (!pc) return;
      // ∆Øu ti√™n API d·∫°ng .on(type, handler)
      if (typeof pc.on === "function") {
        channelEvents.forEach((evt) => {
          const off = pc.on(evt, (payload) => {
            // payload k·ª≥ v·ªçng d·∫°ng { source, type, data, timestamp } do b√™n emit truy·ªÅn v√†o
            const normalized = {
              source: "phaser-channel",
              type: payload?.type ?? evt,
              data: payload?.data ?? payload,
              timestamp:
                typeof payload?.timestamp === "number"
                  ? payload.timestamp
                  : Date.now(),
              _raw: payload,
            };
            if (typeof callback === "function") callback(normalized);
          });
          // N·∫øu .on tr·∫£ v·ªÅ h√†m off th√¨ l∆∞u l·∫°i, n·∫øu kh√¥ng th√¨ t·∫°o off r·ªóng
          offFns.push(typeof off === "function" ? off : () => {});
        });
        return true;
      }

      // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ .on/.emit (k√™nh t·ª± tri·ªÉn khai kh√°c) th√¨ b·∫°n c√≥ th·ªÉ
      // b·ªï sung nh√°nh n√†y ƒë·ªÉ th√≠ch ·ª©ng, v√≠ d·ª•: pc.addEventListener(...)
      // ·ªû ƒë√¢y m√¨nh ch·ªâ h·ªó tr·ª£ chu·∫©n .on/.emit ƒë·ªÉ t·ªëi gi·∫£n nh∆∞ y√™u c·∫ßu ‚Äúch·ªâ s·ª≠a trong setupMessageListener‚Äù.
      console.warn(
        "[setupMessageListener] PhaserChannel kh√¥ng c√≥ .on(); b·ªè qua."
      );
      return false;
    } catch (e) {
      console.error("‚ùå Error attaching PhaserChannel listeners:", e);
      return false;
    }
  };

  // G·∫Øn ngay n·∫øu ƒë√£ c√≥ s·∫µn
  if (window.PhaserChannel) {
    attachPhaserChannelListeners(window.PhaserChannel);
  } else {
    // Poll ch·ªù PhaserChannel xu·∫•t hi·ªán (khi bundle kh·ªüi t·∫°o xong)
    pollId = setInterval(() => {
      if (window.PhaserChannel) {
        clearInterval(pollId);
        pollId = null;
        attachPhaserChannelListeners(window.PhaserChannel);
      }
    }, pollMs);

    timeoutId = setTimeout(() => {
      if (pollId) clearInterval(pollId);
      pollId = null;
      timeoutId = null;
      // Kh√¥ng c√≥ PhaserChannel trong kho·∫£ng waitMs ‚Äì kh√¥ng sao, v·∫´n ch·ªâ nghe postMessage
      // console.debug("[setupMessageListener] H·∫øt th·ªùi gian ch·ªù PhaserChannel.");
    }, waitMs);
  }

  // --- Cleanup ---
  return function cleanup() {
    window.removeEventListener("message", messageHandler);
    offFns.forEach((off) => {
      try {
        off();
      } catch {}
    });
    if (pollId) clearInterval(pollId);
    if (timeoutId) clearTimeout(timeoutId);
  };
}

/**
 * G·ª≠i th√¥ng b√°o s·∫µn s√†ng ƒë·∫øn trang web ch·ª©a iframe
 */
export function sendReadyMessage() {
  return sendMessageToParent("READY", {
    gameVersion: "1.0.0",
    features: ["robot-programming", "battery-collection"],
  });
}

/**
 * G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @param {Object} victoryResult - K·∫øt qu·∫£ ki·ªÉm tra th·∫Øng thua
 */
export function sendBatteryCollectionResult(scene, victoryResult) {
  if (victoryResult.isVictory) {
    const payload = {};
    if (typeof victoryResult.starScore === "number") {
      payload.score = victoryResult.starScore;
    }
    return sendVictoryMessage(payload);
  } else {
    // Truy·ªÅn chi ti·∫øt l√Ω do thua t·ª´ victoryResult
    const loseData = {
      reason: victoryResult.reason || "GAME_OVER",
      message: victoryResult.message || "Game over",
      details: victoryResult.details || {},
    };
    return sendLoseMessage(loseData);
  }
}

/**
 * X·ª≠ l√Ω vi·ªác load mapJson v√† challengeJson t·ª´ webview
 * @param {Object} game - ƒê·ªëi t∆∞·ª£ng game Phaser
 * @param {Object} mapJson - D·ªØ li·ªáu map JSON
 * @param {Object} challengeJson - D·ªØ li·ªáu challenge JSON
 * @returns {boolean} Success/failure
 */
export function loadMapAndChallenge(game, mapJson, challengeJson) {
  try {
    if (!mapJson || !challengeJson) {
      console.error(
        "‚ùå loadMapAndChallenge: mapJson and challengeJson are required"
      );
      return false;
    }

    console.log("üì• Loading mapJson and challengeJson from webview");

    const scene = game.scene.getScene("Scene");
    if (scene) {
      // Kh·ªüi ƒë·ªông l·∫°i scene v·ªõi mapJson v√† challengeJson m·ªõi
      scene.scene.restart({ mapJson, challengeJson });
    } else {
      // N·∫øu scene ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
      game.scene.start("Scene", { mapJson, challengeJson });
    }

    return true;
  } catch (error) {
    console.error("‚ùå Error loading mapJson and challengeJson:", error);
    sendErrorMessage({
      type: "LOAD_ERROR",
      message: error.message,
    });
    return false;
  }
}

/**
 * Kh·ªüi t·∫°o h·ªá th·ªëng giao ti·∫øp v·ªõi webview
 * @param {Object} game - ƒê·ªëi t∆∞·ª£ng game Phaser
 */
export function initWebViewCommunication(game) {
  // G·ª≠i th√¥ng b√°o s·∫µn s√†ng khi game kh·ªüi t·∫°o xong
  sendReadyMessage();

  // Thi·∫øt l·∫≠p l·∫Øng nghe th√¥ng ƒëi·ªáp t·ª´ trang web ch·ª©a iframe
  setupMessageListener((message) => {
    // X·ª≠ l√Ω c√°c lo·∫°i th√¥ng ƒëi·ªáp t·ª´ trang web ch·ª©a
    switch (message.type) {
      case "START_MAP": {
        // B·∫Øt ƒë·∫ßu tr·ª±c ti·∫øp Scene v·ªõi mapJson v√† challengeJson
        const mapJson = message.data && message.data.mapJson;
        const challengeJson = message.data && message.data.challengeJson;
        if (mapJson && challengeJson) {
          console.log(`‚ñ∂Ô∏è START_MAP with mapJson and challengeJson`);
          game.scene.start("Scene", { mapJson, challengeJson });
        } else if (mapJson) {
          console.log(`‚ñ∂Ô∏è START_MAP with mapJson only`);
          game.scene.start("Scene", { mapJson });
        } else {
          console.warn("‚ö†Ô∏è START_MAP: Missing mapJson or challengeJson");
        }
        break;
      }
      case "LOAD_MAP":
        // X·ª≠ l√Ω y√™u c·∫ßu t·∫£i map (deprecated - s·ª≠ d·ª•ng LOAD_MAP_AND_CHALLENGE)
        console.warn(
          "‚ö†Ô∏è LOAD_MAP is deprecated. Use LOAD_MAP_AND_CHALLENGE instead."
        );
        break;

      case "LOAD_MAP_AND_CHALLENGE":
        // X·ª≠ l√Ω y√™u c·∫ßu t·∫£i mapJson v√† challengeJson
        const mapJsonData = message.data && message.data.mapJson;
        const challengeJsonData = message.data && message.data.challengeJson;

        if (mapJsonData && challengeJsonData) {
          console.log(
            `üì• LOAD_MAP_AND_CHALLENGE: Received mapJson and challengeJson`
          );

          const scene = game.scene.getScene("Scene");
          if (scene) {
            // Kh·ªüi ƒë·ªông l·∫°i scene v·ªõi mapJson v√† challengeJson m·ªõi
            scene.scene.restart({
              mapJson: mapJsonData,
              challengeJson: challengeJsonData,
            });
          } else {
            // N·∫øu scene ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
            game.scene.start("Scene", {
              mapJson: mapJsonData,
              challengeJson: challengeJsonData,
            });
          }
        } else {
          console.warn(
            "‚ö†Ô∏è LOAD_MAP_AND_CHALLENGE: Missing mapJson or challengeJson"
          );
          sendErrorMessage({
            type: "MISSING_DATA",
            message: "mapJson and challengeJson are required",
          });
        }
        break;

      case "RUN_PROGRAM":
        // X·ª≠ l√Ω y√™u c·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh
        if (message.data && message.data.program) {
          const scene = game.scene.getScene("Scene");
          if (scene) {
            scene.loadProgram(message.data.program, true);
          }
        }
        break;

      case "GET_STATUS":
        // G·ª≠i tr·∫°ng th√°i hi·ªán t·∫°i
        const scene = game.scene.getScene("Scene");
        if (scene) {
          const status = {
            mapKey: scene.mapKey,
            collectedBatteries: scene.collectedBatteries || 0,
            collectedBatteryTypes: scene.collectedBatteryTypes || {
              red: 0,
              yellow: 0,
              green: 0,
            },
          };
          sendMessageToParent("STATUS", status);
        }
        break;

      case "RESTART_SCENE":
        // Kh·ªüi ƒë·ªông l·∫°i scene hi·ªán t·∫°i v·ªõi d·ªØ li·ªáu ƒëang c√≥
        {
          const current = game.scene.getScene("Scene");
          if (current) {
            const payload = {
              mapJson: current.mapJson || null,
              challengeJson: current.challengeJson || null,
            };
            current.scene.restart(payload);
          } else {
            // N·∫øu scene ch∆∞a ch·∫°y, ch·ªâ c·∫ßn start (s·∫Ω hi·ªán loading UI n·∫øu thi·∫øu data)
            game.scene.start("Scene", {});
          }
        }
        break;
    }
  });

  // Th√™m API to√†n c·ª•c cho webview g·ªçi tr·ª±c ti·∫øp (t√πy ch·ªçn)
  window.RobotGameAPI = {
    loadMapAndChallenge: (mapJson, challengeJson) => {
      return loadMapAndChallenge(game, mapJson, challengeJson);
    },

    runProgram: (program) => {
      const scene = game.scene.getScene("Scene");
      if (scene) {
        // Ki·ªÉm tra tr·∫°ng th√°i game tr∆∞·ªõc khi ch·∫°y program
        if (scene.gameState === "lost" || scene.gameState === "won") {
          console.warn("‚ö†Ô∏è Cannot run program: Game is in lost or won state");
          return false;
        }
        return scene.loadProgram(program, true);
      }
      return false;
    },

    getStatus: () => {
      const scene = game.scene.getScene("Scene");
      if (scene) {
        return {
          collectedBatteries: scene.collectedBatteries || 0,
          collectedBatteryTypes: scene.collectedBatteryTypes || {
            red: 0,
            yellow: 0,
            green: 0,
          },
        };
      }
      return null;
    },

    restart: () => {
      const scene = game.scene.getScene("Scene");
      if (scene) {
        scene.scene.restart({
          mapJson: scene.mapJson || null,
          challengeJson: scene.challengeJson || null,
        });
        return true;
      }
      game.scene.start("Scene", {});
      return true;
    },
  };
}
