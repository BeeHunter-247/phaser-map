/**
 * VictoryConditions.js
 *
 * H·ªá th·ªëng ƒë√°nh gi√° ti√™u ch√≠ th·∫Øng thua cho t·ª´ng map d·ª±a tr√™n vi·ªác thu th·∫≠p pin
 */

import { mapConfigs } from "../data/mapConfigs.js";
import { sendBatteryCollectionResult } from "./WebViewMessenger.js";

/**
 * L·ªõp ƒë√°nh gi√° ƒëi·ªÅu ki·ªán th·∫Øng
 */
export class VictoryConditions {
  /**
   * T√≠nh t·ªïng s·ªë pin c·∫ßn thu th·∫≠p trong m·ªôt map
   * @param {string} mapKey - Key c·ªßa map (basic1, basic2, etc.)
   * @returns {Object} Th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng pin c·∫ßn thu th·∫≠p
   */
  static getRequiredBatteries(mapKey) {
    const config = mapConfigs[mapKey];
  
    // ∆Øu ti√™n s·ª≠ d·ª•ng c·∫•u h√¨nh victory m·ªõi n·∫øu c√≥
    if (config && config.victory) {
      const victory = config.victory;
      const byType = { red: 0, yellow: 0, green: 0 };
      
      // X·ª≠ l√Ω c·∫•u tr√∫c byType m·ªõi: [{ red: 0, yellow: 0, green: 1 }]
      if (Array.isArray(victory.byType) && victory.byType.length > 0) {
        const typeConfig = victory.byType[0];
        byType.red = typeConfig.red || 0;
        byType.yellow = typeConfig.yellow || 0;
        byType.green = typeConfig.green || 0;
      }
      
      return { 
        total: victory.total || 0, 
        byType 
      };
    }
  }

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng d·ª±a tr√™n pin ƒë√£ thu th·∫≠p
   * @param {Object} scene - Scene hi·ªán t·∫°i
   * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra { isVictory, progress, message }
   */
  static checkVictory(scene) {
    // N·∫øu kh√¥ng c√≥ mapKey ho·∫∑c kh√¥ng c√≥ batteryManager
    if (!scene.mapKey || !scene.batteryManager) {
      return {
        isVictory: false,
        isDefeat: false,  // Th√™m l·∫°i
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {
          red: "ƒê·ªè: 0/0",
          yellow: "V√†ng: 0/0", 
          green: "Xanh l√°: 0/0"
        }
      };
    }
  
    // L·∫•y th√¥ng tin pin c·∫ßn thu th·∫≠p
    const required = this.getRequiredBatteries(scene.mapKey);
  
    // L·∫•y th√¥ng tin pin ƒë√£ thu th·∫≠p t·ª´ BatteryManager
    const collected = scene.batteryManager ? scene.batteryManager.getCollectedBatteries() : { total: 0, byType: { red: 0, yellow: 0, green: 0 } };
  
    // T√≠nh t·ª∑ l·ªá ho√†n th√†nh
    const progress = required.total > 0 ? Math.min(1, collected.total / required.total) : 1;
  
    // KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN THUA: Thu th·∫≠p qu√° s·ªë l∆∞·ª£ng y√™u c·∫ßu
    const isDefeat = this.checkDefeatCondition(collected, required);
  
    // Ki·ªÉm tra ƒë√£ thu th·∫≠p ƒë·ªß pin ch∆∞a (ch·ªâ khi ch∆∞a thua)
    const isVictory = !isDefeat && collected.total >= required.total;
  
    // T·∫°o th√¥ng b√°o
    let message;
    if (isDefeat) {
      message = this.getDefeatMessage(collected, required);
    } else if (isVictory) {
      message = `Chi·∫øn th·∫Øng! ƒê√£ thu th·∫≠p ƒë·ªß ${collected.total}/${required.total} pin`;
    } else {
      message = `ƒê√£ thu th·∫≠p ${collected.total}/${required.total} pin (${Math.round(progress * 100)}%)`;
    }
  
    // Th√¥ng tin chi ti·∫øt theo m√†u
    const details = {
      red: `ƒê·ªè: ${collected.byType.red || 0}/${required.byType.red || 0}`,
      yellow: `V√†ng: ${collected.byType.yellow || 0}/${required.byType.yellow || 0}`,
      green: `Xanh l√°: ${collected.byType.green || 0}/${required.byType.green || 0}`,
    };
  
    return {
      isVictory,
      isDefeat,  // Th√™m l·∫°i
      progress,
      message,
      details,
      required,
      collected,
    };
  }
  static checkDefeatCondition(collected, required) {
    // Ki·ªÉm tra t·ªïng s·ªë pin
    if (collected.total > required.total) {
      return true;
    }
  
    // Ki·ªÉm tra t·ª´ng lo·∫°i pin
    const colors = ['red', 'yellow', 'green'];
    for (const color of colors) {
      const collectedCount = collected.byType[color] || 0;
      const requiredCount = required.byType[color] || 0;
      
      if (collectedCount != requiredCount) {
        return true;
      }
    }
  
    return false;
  }
  
  /**
   * T·∫°o th√¥ng b√°o thua cu·ªôc
   * @param {Object} collected - Pin ƒë√£ thu th·∫≠p
   * @param {Object} required - Pin c·∫ßn thi·∫øt
   * @returns {string} Th√¥ng b√°o thua
   */
  static getDefeatMessage(collected, required) {
    // Ki·ªÉm tra t·ªïng s·ªë pin
    if (collected.total > required.total) {
      return `Thua! Thu th·∫≠p qu√° nhi·ªÅu pin: ${collected.total}/${required.total}`;
    }
  
    // Ki·ªÉm tra t·ª´ng lo·∫°i pin
    const colors = ['red', 'yellow', 'green'];
    for (const color of colors) {
      const collectedCount = collected.byType[color] || 0;
      const requiredCount = required.byType[color] || 0;
      
      if (collectedCount > requiredCount) {
        const colorName = color === 'red' ? 'ƒë·ªè' : color === 'yellow' ? 'v√†ng' : 'xanh l√°';
        return `Thua! Thu th·∫≠p qu√° nhi·ªÅu pin ${colorName}: ${collectedCount}/${requiredCount}`;
      }
    }
  
    return "Thua cu·ªôc!";
  }
  /**
   * T·∫°o th√¥ng tin t·ªïng quan v·ªÅ map
   * @param {string} mapKey - Key c·ªßa map (basic1, basic2, etc.)
   * @returns {Object} Th√¥ng tin t·ªïng quan
   */
  static getMapSummary(mapKey) {
    const config = mapConfigs[mapKey];
    if (!config) return null;

    const required = this.getRequiredBatteries(mapKey);

    // L·∫•y th√¥ng tin robot
    const robot = config.robot || {};
    const robotPos = robot.tile || { x: 0, y: 0 };
    const robotDirection = robot.direction || "north";

    // T·∫°o m·∫£ng v·ªã tr√≠ pin
    const batteryPositions = [];
    if (config.batteries) {
      config.batteries.forEach((batteryConfig) => {
        if (batteryConfig.tiles) {
          batteryConfig.tiles.forEach((tileConfig) => {
            batteryPositions.push({
              position: { x: tileConfig.x, y: tileConfig.y },
              count: tileConfig.count || 1,
              type: tileConfig.type || batteryConfig.type || "green",
              types: tileConfig.types,
            });
          });
        }
      });
    }

    return {
      mapKey,
      robotPosition: robotPos,
      robotDirection,
      batteryPositions,
      requiredBatteries: required,
    };
  }

  /**
   * L·∫•y th√¥ng tin t·ªïng quan cho t·∫•t c·∫£ c√°c map
   * @returns {Object} Th√¥ng tin t·ªïng quan cho m·ªói map
   */
  static getAllMapsSummary() {
    const summary = {};

    Object.keys(mapConfigs).forEach((mapKey) => {
      summary[mapKey] = this.getMapSummary(mapKey);
    });

    return summary;
  }
}

/**
 * H√†m ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i th·∫Øng/thua
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra
 */
export function checkAndDisplayVictory(scene) {
  const result = VictoryConditions.checkVictory(scene);

  // Hi·ªÉn th·ªã th√¥ng tin trong console
  if (result.isVictory) {
    console.log(`üèÜ ${result.message}`);
  } else {
    console.log(`üìä ${result.message}`);
  }

  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi log
  if (result.details) {
    console.log(`   ${result.details.red}`);
    console.log(`   ${result.details.yellow}`);
    console.log(`   ${result.details.green}`);
  }

  // G·ª≠i k·∫øt qu·∫£ ƒë·∫øn webview b√™n ngo√†i
  sendBatteryCollectionResult(scene, result);

  return result;
}

/**
 * H√†m t·∫°o text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Phaser.GameObjects.Text} Text object
 */
export function createBatteryStatusText(scene) {
  // T·∫°o text ·ªü g√≥c tr√™n b√™n ph·∫£i
  const statusText = scene.add.text(
    scene.cameras.main.width - 10,
    10,
    "ƒêang t·∫£i...",
    {
      fontFamily: "Arial",
      fontSize: "16px",
      fill: "#ffffff",
      backgroundColor: "#333333",
      padding: { x: 10, y: 5 },
    }
  );

  // CƒÉn ph·∫£i
  statusText.setOrigin(1, 0);

  // C·∫≠p nh·∫≠t text
  updateBatteryStatusText(scene, statusText);

  return statusText;
}

/**
 * C·∫≠p nh·∫≠t text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @param {Phaser.GameObjects.Text} statusText - Text object
 */
export function updateBatteryStatusText(scene, statusText) {
  const result = VictoryConditions.checkVictory(scene);

  // T·∫°o n·ªôi dung text
  let content = `Map: ${scene.mapKey}\n`;
  content += `${result.message}\n`;
  
  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng
  if (result.details) {
    content += `${result.details.red}\n`;
    content += `${result.details.yellow}\n`;
    content += `${result.details.green}`;
  } else {
    content += "ƒêang t·∫£i...";
  }

  // C·∫≠p nh·∫≠t text
  statusText.setText(content);

  // ƒê·ªïi m√†u n·∫øu th·∫Øng
  if (result.isVictory) {
    statusText.setStyle({
      backgroundColor: "#006600",
      fill: "#ffffff",
    });
  } else {
    statusText.setStyle({
      backgroundColor: "#333333",
      fill: "#ffffff",
    });
  }
}
