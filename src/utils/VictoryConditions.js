/**
 * VictoryConditions.js
 *
 * H·ªá th·ªëng ƒë√°nh gi√° ti√™u ch√≠ th·∫Øng thua cho t·ª´ng map d·ª±a tr√™n vi·ªác thu th·∫≠p pin
 * S·ª≠ d·ª•ng challenge.json config th√¥ng qua MapModel
 */

import { sendBatteryCollectionResult } from "./WebViewMessenger.js";

/**
 * L·ªõp ƒë√°nh gi√° ƒëi·ªÅu ki·ªán th·∫Øng
 */
export class VictoryConditions {
  /**
   * T√≠nh t·ªïng s·ªë pin c·∫ßn thu th·∫≠p trong m·ªôt map
   * @param {Object} scene - Scene hi·ªán t·∫°i (ch·ª©a mapModel)
   * @returns {Object} Th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng pin c·∫ßn thu th·∫≠p
   */
  static getRequiredBatteries(scene) {
    if (!scene || !scene.mapModel) {
      return undefined;
    }

    const victory = scene.mapModel.victoryConditions;

    // ∆Øu ti√™n s·ª≠ d·ª•ng c·∫•u h√¨nh victory m·ªõi n·∫øu c√≥
    if (victory) {
      const byType = { red: 0, yellow: 0, green: 0 };

      // X·ª≠ l√Ω c·∫•u tr√∫c byType m·ªõi: [{ red: 0, yellow: 0, green: 1 }]
      if (Array.isArray(victory.byType) && victory.byType.length > 0) {
        const typeConfig = victory.byType[0];
        // N·∫øu entry ƒë·∫ßu l√† d·∫°ng box (c√≥ x,y) th√¨ kh√¥ng c√≥ c·∫•u h√¨nh pin
        if (
          typeof typeConfig.x === "number" &&
          typeof typeConfig.y === "number"
        ) {
          return undefined;
        }

        byType.red = typeConfig.red || 0;
        byType.yellow = typeConfig.yellow || 0;
        byType.green = typeConfig.green || 0;

        const totalRequired =
          (byType.red || 0) + (byType.yellow || 0) + (byType.green || 0);
        if (totalRequired === 0) {
          // Kh√¥ng ƒë·∫∑t m·ª•c ti√™u pin
          return undefined;
        }
      }

      return {
        byType,
        description: victory.description || undefined,
      };
    }
  }

  /**
   * L·∫•y y√™u c·∫ßu v·ªÅ box ƒë∆∞·ª£c ƒë·∫∑t t·∫°i c√°c v·ªã tr√≠ ch·ªâ ƒë·ªãnh (n·∫øu c√≥)
   * D√πng c√πng tr∆∞·ªùng victory.byType nh∆∞ng m·ªói ph·∫ßn t·ª≠ c√≥ {x,y,count}
   */
  static getRequiredBoxes(scene) {
    if (!scene || !scene.mapModel) return undefined;

    const victory = scene.mapModel.victoryConditions;
    if (!victory) return undefined;

    const arr = Array.isArray(victory.byType) ? victory.byType : [];
    const targets = arr.filter(
      (v) => typeof v.x === "number" && typeof v.y === "number"
    );
    return targets.length > 0 ? targets : undefined;
  }

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng d·ª±a tr√™n pin ƒë√£ thu th·∫≠p
   * @param {Object} scene - Scene hi·ªán t·∫°i
   * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra { isVictory, progress, message }
   */
  static checkVictory(scene) {
    if (!scene || !scene.mapModel) {
      return {
        isVictory: false,
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {
          red: "ƒê·ªè: 0/0",
          yellow: "V√†ng: 0/0",
          green: "Xanh l√°: 0/0",
        },
      };
    }

    // ∆Øu ti√™n ki·ªÉm tra theo box n·∫øu c·∫•u h√¨nh victory d√πng to·∫° ƒë·ªô
    const requiredBoxes = this.getRequiredBoxes(scene);
    if (requiredBoxes && scene.boxManager) {
      const detailsBoxes = [];
      let allMet = true;
      for (const t of requiredBoxes) {
        const key = `${t.x},${t.y}`;
        const data = scene.boxManager.getBoxesAtTile
          ? scene.boxManager.getBoxesAtTile(key)
          : null;
        const current = data ? data.count : 0;
        const need = t.count || 0;
        detailsBoxes.push(`Box (${t.x},${t.y}): ${current}/${need}`);
        if (current !== need) allMet = false;
      }
      return {
        isVictory: allMet,
        details: { boxes: detailsBoxes },
        required: { boxes: requiredBoxes },
        collected: { boxes: detailsBoxes },
      };
    }

    // L·∫•y th√¥ng tin pin c·∫ßn thu th·∫≠p
    const required = this.getRequiredBatteries(scene);

    // M·∫∑c ƒë·ªãnh: ki·ªÉm tra theo pin
    if (!scene.batteryManager || !required) {
      return {
        isVictory: false,
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {},
      };
    }

    // L·∫•y th√¥ng tin pin ƒë√£ thu th·∫≠p t·ª´ BatteryManager
    const collected = scene.batteryManager
      ? scene.batteryManager.getCollectedBatteries()
      : { total: 0, byType: { red: 0, yellow: 0, green: 0 } };

    const isVictory = this.checkVictoryCondition(collected, required);

    // Kh√¥ng t·∫°o message ·ªü ƒë√¢y, ƒë·ªÉ ProgramExecutor t·ª± t·∫°o message ph√π h·ª£p

    // Th√¥ng tin chi ti·∫øt theo m√†u
    const details = {
      red: `ƒê·ªè: ${collected.byType.red || 0}/${required.byType.red || 0}`,
      yellow: `V√†ng: ${collected.byType.yellow || 0}/${
        required.byType.yellow || 0
      }`,
      green: `Xanh l√°: ${collected.byType.green || 0}/${
        required.byType.green || 0
      }`,
    };

    return {
      isVictory,
      details,
      required,
      collected,
    };
  }

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng: ƒë·ªß c·∫£ t·ªïng s·ªë v√† t·ª´ng m√†u
   * @param {Object} collected - Pin ƒë√£ thu th·∫≠p
   * @param {Object} required - Pin c·∫ßn thi·∫øt
   * @returns {boolean} C√≥ th·∫Øng kh√¥ng
   */
  static checkVictoryCondition(collected, required) {
    // Ch·ªâ ki·ªÉm tra t·ª´ng lo·∫°i pin (b·ªè ki·ªÉm tra total)
    const colors = ["red", "yellow", "green"];
    for (const color of colors) {
      const collectedCount = collected.byType[color] || 0;
      const requiredCount = required.byType[color] || 0;

      if (collectedCount !== requiredCount) {
        return false;
      }
    }

    return true;
  }

  /**
   * T·∫°o th√¥ng tin t·ªïng quan v·ªÅ map
   * @param {Object} scene - Scene hi·ªán t·∫°i (ch·ª©a mapModel)
   * @returns {Object} Th√¥ng tin t·ªïng quan
   */
  static getMapSummary(scene) {
    if (!scene || !scene.mapModel) return null;

    const mapModel = scene.mapModel;
    const required = this.getRequiredBatteries(scene);

    // L·∫•y th√¥ng tin robot t·ª´ mapModel
    const robotPos = { x: 0, y: 0 };
    const robotDirection = "north";

    // T√¨m robot ƒë·∫ßu ti√™n trong mapModel
    for (const robot of mapModel.robots.values()) {
      robotPos.x = robot.tileX || 0;
      robotPos.y = robot.tileY || 0;
      robotDirection = robot.direction || "north";
      break;
    }

    // T·∫°o m·∫£ng v·ªã tr√≠ pin t·ª´ mapModel
    const batteryPositions = [];
    for (const battery of mapModel.batteries.values()) {
      batteryPositions.push({
        position: { x: battery.tileX, y: battery.tileY },
        count: battery.count || 1,
        type: battery.type || "green",
        types: battery.types,
      });
    }

    return {
      mapKey: mapModel.mapKey,
      robotPosition: robotPos,
      robotDirection,
      batteryPositions,
      requiredBatteries: required,
    };
  }

  /**
   * L·∫•y th√¥ng tin t·ªïng quan cho t·∫•t c·∫£ c√°c map
   * @param {Object} scene - Scene hi·ªán t·∫°i (ch·ª©a mapModel)
   * @returns {Object} Th√¥ng tin t·ªïng quan cho m·ªói map
   */
  static getAllMapsSummary(scene) {
    const summary = {};

    if (scene && scene.mapModel) {
      summary[scene.mapModel.mapKey] = this.getMapSummary(scene);
    }

    return summary;
  }
}

/**
 * H√†m ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i th·∫Øng/thua
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra
 */
export function checkAndDisplayVictory(scene) {
  const result = VictoryConditions.checkVictory(scene);

  // Hi·ªÉn th·ªã th√¥ng tin trong console
  if (result.isVictory) {
    console.log(`üèÜ Chi·∫øn th·∫Øng! ƒê√£ thu th·∫≠p ƒë·ªß pin theo y√™u c·∫ßu`);
  } else {
    console.log(`üìä Ch∆∞a thu th·∫≠p ƒë·ªß pin theo y√™u c·∫ßu`);
  }

  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi log
  if (result.details) {
    console.log(`   ${result.details.red}`);
    console.log(`   ${result.details.yellow}`);
    console.log(`   ${result.details.green}`);
  }

  // G·ª≠i k·∫øt qu·∫£ ƒë·∫øn webview b√™n ngo√†i (ch·ªâ th·∫Øng/thua)
  sendBatteryCollectionResult(scene, result);

  return result;
}

/**
 * H√†m t·∫°o text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Phaser.GameObjects.Text} Text object
 */
export function createBatteryStatusText(scene) {
  // T·∫°o text ·ªü g√≥c tr√™n b√™n ph·∫£i
  const statusText = scene.add.text(
    scene.cameras.main.width - 10,
    10,
    "ƒêang t·∫£i...",
    {
      fontFamily: "Arial",
      fontSize: "16px",
      fill: "#ffffff",
      backgroundColor: "#333333",
      padding: { x: 10, y: 5 },
    }
  );

  // CƒÉn ph·∫£i
  statusText.setOrigin(1, 0);

  // C·∫≠p nh·∫≠t text
  updateBatteryStatusText(scene, statusText);

  return statusText;
}

/**
 * C·∫≠p nh·∫≠t text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @param {Phaser.GameObjects.Text} statusText - Text object
 */
export function updateBatteryStatusText(scene, statusText) {
  const result = VictoryConditions.checkVictory(scene);

  // T·∫°o n·ªôi dung text
  const mapKey = scene.mapModel ? scene.mapModel.mapKey : "Unknown";
  let content = `Map: ${mapKey}\n`;
  if (result.isVictory) {
    content += `Chi·∫øn th·∫Øng!\n`;
  } else {
    content += `ƒêang ch∆°i...\n`;
  }

  // Hi·ªÉn th·ªã chi ti·∫øt theo lo·∫°i m·ª•c ti√™u
  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng
  if (result.details) {
    if (result.details.red || result.details.yellow || result.details.green) {
      // Tr∆∞·ªùng h·ª£p theo pin
      if (result.details.red) content += `${result.details.red}\n`;
      if (result.details.yellow) content += `${result.details.yellow}\n`;
      if (result.details.green) content += `${result.details.green}`;
    } else if (Array.isArray(result.details.boxes)) {
      // Tr∆∞·ªùng h·ª£p theo box
      content += result.details.boxes.join("\n");
    } else {
      content += "ƒêang t·∫£i...";
    }
  } else {
    content += "ƒêang t·∫£i...";
  }

  // Th√™m th√¥ng tin box n·∫øu c√≥ BoxManager
  if (scene.boxManager) {
    const boxStats = scene.boxManager.getStats();
    content += `\nüì¶ ƒê√£ l·∫•y: ${boxStats.collectedBoxes} | ƒê√£ ƒë·∫∑t: ${boxStats.putBoxes}`;
  }

  // C·∫≠p nh·∫≠t text
  statusText.setText(content);

  // ƒê·ªïi m√†u n·∫øu th·∫Øng
  if (result.isVictory) {
    statusText.setStyle({
      backgroundColor: "#006600",
      fill: "#ffffff",
    });
  } else {
    statusText.setStyle({
      backgroundColor: "#333333",
      fill: "#ffffff",
    });
  }
}
