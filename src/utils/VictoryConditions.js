/**
 * VictoryConditions.js
 *
 * H·ªá th·ªëng ƒë√°nh gi√° ti√™u ch√≠ th·∫Øng thua cho t·ª´ng map d·ª±a tr√™n vi·ªác thu th·∫≠p pin
 */

import { sendBatteryCollectionResult } from "./WebViewMessenger.js";

/**
 * L·ªõp ƒë√°nh gi√° ƒëi·ªÅu ki·ªán th·∫Øng
 */
export class VictoryConditions {
  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng d·ª±a tr√™n pin ƒë∆∞·ª£c ph√©p collect
   * @param {Object} scene - Scene hi·ªán t·∫°i
   * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra { isVictory, progress, message }
   */
  static checkVictoryByAllowedBatteries(scene) {
    if (!scene.entityManager) {
      return {
        isVictory: false,
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {},
      };
    }

    const totalAllowed = scene.entityManager.getTotalAllowedBatteries();
    const totalCollected = scene.entityManager.totalCollectedBatteries;
    const allowedByType = scene.entityManager.getAllowedBatteriesByType();
    const collectedByType = scene.entityManager.collectedBatteries;

    const isVictory = totalCollected >= totalAllowed;

    // Th√¥ng tin chi ti·∫øt theo m√†u
    const details = {
      red: `ƒê·ªè: ${collectedByType.red || 0}/${allowedByType.red || 0}`,
      yellow: `V√†ng: ${collectedByType.yellow || 0}/${
        allowedByType.yellow || 0
      }`,
      green: `Xanh l√°: ${collectedByType.green || 0}/${
        allowedByType.green || 0
      }`,
    };

    return {
      isVictory,
      progress: totalAllowed > 0 ? (totalCollected / totalAllowed) * 100 : 0,
      message: isVictory
        ? "Chi·∫øn th·∫Øng!"
        : `ƒêang ch∆°i... (${totalCollected}/${totalAllowed})`,
      details,
      totalAllowed,
      totalCollected,
      allowedByType,
      collectedByType,
    };
  }

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng d·ª±a tr√™n pin ƒë√£ thu th·∫≠p (legacy method)
   * @param {Object} scene - Scene hi·ªán t·∫°i
   * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra { isVictory, progress, message }
   */
  static checkVictory(scene) {
    // S·ª≠ d·ª•ng challenge data t·ª´ JSON thay v√¨ mapKey
    const challengeData = scene.cache.json.get("challengeData");
    if (!challengeData) {
      return {
        isVictory: false,
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {
          red: "ƒê·ªè: 0/0",
          yellow: "V√†ng: 0/0",
          green: "Xanh l√°: 0/0",
        },
      };
    }

    // M·∫∑c ƒë·ªãnh: ki·ªÉm tra theo pin t·ª´ challenge data
    if (!scene.batteryManager) {
      return {
        isVictory: false,
        progress: 0,
        message: "ƒêang kh·ªüi t·∫°o...",
        details: {},
      };
    }

    // T√≠nh to√°n required batteries t·ª´ challenge data
    const required =
      this.calculateRequiredBatteriesFromChallenge(challengeData);

    // L·∫•y th√¥ng tin pin ƒë√£ thu th·∫≠p t·ª´ BatteryManager
    const collected = scene.batteryManager
      ? scene.batteryManager.getCollectedBatteries()
      : { total: 0, byType: { red: 0, yellow: 0, green: 0 } };

    const isVictory = this.checkVictoryCondition(collected, required);

    // Kh√¥ng t·∫°o message ·ªü ƒë√¢y, ƒë·ªÉ ProgramExecutor t·ª± t·∫°o message ph√π h·ª£p

    // Th√¥ng tin chi ti·∫øt theo m√†u
    const details = {
      red: `ƒê·ªè: ${collected.byType.red || 0}/${required.byType.red || 0}`,
      yellow: `V√†ng: ${collected.byType.yellow || 0}/${
        required.byType.yellow || 0
      }`,
      green: `Xanh l√°: ${collected.byType.green || 0}/${
        required.byType.green || 0
      }`,
    };

    return {
      isVictory,
      details,
      required,
      collected,
    };
  }

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng: ƒë·ªß c·∫£ t·ªïng s·ªë v√† t·ª´ng m√†u
   * @param {Object} collected - Pin ƒë√£ thu th·∫≠p
   * @param {Object} required - Pin c·∫ßn thi·∫øt
   * @returns {boolean} C√≥ th·∫Øng kh√¥ng
   */
  static checkVictoryCondition(collected, required) {
    // Ch·ªâ ki·ªÉm tra t·ª´ng lo·∫°i pin (b·ªè ki·ªÉm tra total)
    const colors = ["red", "yellow", "green"];
    for (const color of colors) {
      const collectedCount = collected.byType[color] || 0;
      const requiredCount = required.byType[color] || 0;

      if (collectedCount !== requiredCount) {
        return false;
      }
    }

    return true;
  }

  /**
   * T√≠nh to√°n required batteries t·ª´ challenge data
   * @param {Object} challengeData - Challenge data t·ª´ JSON
   * @returns {Object} Required batteries by type
   */
  static calculateRequiredBatteriesFromChallenge(challengeData) {
    const byType = { red: 0, yellow: 0, green: 0 };

    if (challengeData.batteries && Array.isArray(challengeData.batteries)) {
      challengeData.batteries.forEach((batteryGroup) => {
        if (batteryGroup.tiles && Array.isArray(batteryGroup.tiles)) {
          batteryGroup.tiles.forEach((tile) => {
            const count = tile.count || 1;
            const type = tile.type || "green";
            const allowed = tile.allowedCollect !== false;

            if (allowed && byType.hasOwnProperty(type)) {
              byType[type] += count;
            }
          });
        }
      });
    }

    return { byType };
  }
}

/**
 * H√†m ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i th·∫Øng/thua
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Object} K·∫øt qu·∫£ ki·ªÉm tra
 */
export function checkAndDisplayVictory(scene) {
  // ∆Øu ti√™n s·ª≠ d·ª•ng method m·ªõi d·ª±a tr√™n allowed batteries
  const result = scene.entityManager
    ? VictoryConditions.checkVictoryByAllowedBatteries(scene)
    : VictoryConditions.checkVictory(scene);

  // Hi·ªÉn th·ªã th√¥ng tin trong console
  if (result.isVictory) {
    console.log(`üèÜ Chi·∫øn th·∫Øng! ƒê√£ thu th·∫≠p ƒë·ªß pin ƒë∆∞·ª£c ph√©p collect`);
  } else {
    console.log(`üìä Ch∆∞a thu th·∫≠p ƒë·ªß pin ƒë∆∞·ª£c ph√©p collect`);
  }

  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi log
  if (result.details) {
    console.log(`   ${result.details.red}`);
    console.log(`   ${result.details.yellow}`);
    console.log(`   ${result.details.green}`);
  }

  // G·ª≠i k·∫øt qu·∫£ ƒë·∫øn webview b√™n ngo√†i (ch·ªâ th·∫Øng/thua)
  sendBatteryCollectionResult(scene, result);

  return result;
}

/**
 * H√†m t·∫°o text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @returns {Phaser.GameObjects.Text} Text object
 */
export function createBatteryStatusText(scene) {
  // T·∫°o text ·ªü g√≥c tr√™n b√™n ph·∫£i
  const statusText = scene.add.text(
    scene.cameras.main.width - 10,
    10,
    "ƒêang t·∫£i...",
    {
      fontFamily: "Arial",
      fontSize: "16px",
      fill: "#ffffff",
      backgroundColor: "#333333",
      padding: { x: 10, y: 5 },
    }
  );

  // CƒÉn ph·∫£i
  statusText.setOrigin(1, 0);

  // C·∫≠p nh·∫≠t text
  updateBatteryStatusText(scene, statusText);

  return statusText;
}

/**
 * C·∫≠p nh·∫≠t text hi·ªÉn th·ªã tr·∫°ng th√°i thu th·∫≠p pin
 * @param {Object} scene - Scene hi·ªán t·∫°i
 * @param {Phaser.GameObjects.Text} statusText - Text object
 */
export function updateBatteryStatusText(scene, statusText) {
  const result = VictoryConditions.checkVictory(scene);

  // T·∫°o n·ªôi dung text
  let content = `Challenge Mode\n`;
  if (result.isVictory) {
    content += `Chi·∫øn th·∫Øng!\n`;
  } else {
    content += `ƒêang ch∆°i...\n`;
  }

  // Hi·ªÉn th·ªã chi ti·∫øt theo lo·∫°i m·ª•c ti√™u
  // Ki·ªÉm tra details c√≥ t·ªìn t·∫°i kh√¥ng
  if (result.details) {
    if (result.details.red || result.details.yellow || result.details.green) {
      // Tr∆∞·ªùng h·ª£p theo pin
      if (result.details.red) content += `${result.details.red}\n`;
      if (result.details.yellow) content += `${result.details.yellow}\n`;
      if (result.details.green) content += `${result.details.green}`;
    } else if (Array.isArray(result.details.boxes)) {
      // Tr∆∞·ªùng h·ª£p theo box
      content += result.details.boxes.join("\n");
    } else {
      content += "ƒêang t·∫£i...";
    }
  } else {
    content += "ƒêang t·∫£i...";
  }

  // Th√™m th√¥ng tin box n·∫øu c√≥ BoxManager
  if (scene.boxManager) {
    const boxStats = scene.boxManager.getStats();
    content += `\nüì¶ ƒê√£ l·∫•y: ${boxStats.collectedBoxes} | ƒê√£ ƒë·∫∑t: ${boxStats.putBoxes}`;
  }

  // C·∫≠p nh·∫≠t text
  statusText.setText(content);

  // ƒê·ªïi m√†u n·∫øu th·∫Øng
  if (result.isVictory) {
    statusText.setStyle({
      backgroundColor: "#006600",
      fill: "#ffffff",
    });
  } else {
    statusText.setStyle({
      backgroundColor: "#333333",
      fill: "#ffffff",
    });
  }
}
