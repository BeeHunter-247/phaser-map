import { Robot } from "../models/Robot.js";

/**
 * RobotManager - Qu·∫£n l√Ω robot v√† di chuy·ªÉn (G·ªôp t·ª´ RobotManager v√† RobotController)
 *
 * Tr√°ch nhi·ªám:
 * - Qu·∫£n l√Ω robot sprite v√† model
 * - X·ª≠ l√Ω di chuy·ªÉn v√† xoay
 * - Ki·ªÉm tra va ch·∫°m
 * - C·∫≠p nh·∫≠t game state
 * - Wrapper cho Robot model v·ªõi game-specific logic
 */
export class RobotManager {
  constructor(scene, map, layer) {
    this.scene = scene;
    this.map = map;
    this.layer = layer;
    this.robot = null;
    this.gameState = null;
  }

  /**
   * Kh·ªüi t·∫°o robot
   * @param {Challenge} challenge - D·ªØ li·ªáu th·ª≠ th√°ch
   * @param {Phaser.GameObjects.Sprite} robotSprite - Robot sprite
   * @param {GameState} gameState - Tr·∫°ng th√°i game
   */
  initialize(challenge, robotSprite, gameState) {
    this.gameState = gameState;

    if (!robotSprite) {
      console.warn("‚ö†Ô∏è RobotManager: No robot sprite provided");
      return;
    }

    // T·∫°o Robot model
    this.robot = new Robot(robotSprite);

    // Set v·ªã tr√≠ v√† h∆∞·ªõng ban ƒë·∫ßu
    const startPos = challenge.getRobotPosition();
    this.robot.setPosition(startPos.x, startPos.y);
    this.robot.setDirection(challenge.getRobotDirection());

    console.log(
      `‚úÖ RobotManager: Robot initialized at (${startPos.x}, ${
        startPos.y
      }) facing ${challenge.getRobotDirection()}`
    );
  }

  /**
   * Robot di chuy·ªÉn ti·∫øn
   * @returns {boolean} Th√†nh c√¥ng hay kh√¥ng
   */
  moveForward() {
    if (!this.robot) {
      console.warn("‚ö†Ô∏è RobotManager: Robot not initialized");
      return false;
    }

    const newPos = this.robot.getNextPosition();

    // Ki·ªÉm tra va ch·∫°m v·ªõi map
    if (!this.canMoveTo(newPos.x, newPos.y)) {
      console.log(
        `üö´ RobotManager: Cannot move to (${newPos.x}, ${newPos.y}) - blocked`
      );
      return false;
    }

    // Di chuy·ªÉn robot
    this.robot.moveForward();

    // C·∫≠p nh·∫≠t game state
    this.gameState.updateRobotPosition(
      this.robot.position.x,
      this.robot.position.y
    );

    console.log(
      `‚úÖ RobotManager: Moved to (${this.robot.position.x}, ${this.robot.position.y})`
    );
    return true;
  }

  /**
   * Robot r·∫Ω tr√°i
   * @returns {boolean} Th√†nh c√¥ng hay kh√¥ng
   */
  turnLeft() {
    if (!this.robot) {
      console.warn("‚ö†Ô∏è RobotManager: Robot not initialized");
      return false;
    }

    this.robot.turnLeft();
    this.gameState.updateRobotDirection(this.robot.direction);

    console.log(
      `‚úÖ RobotManager: Turned left, now facing ${this.robot.direction}`
    );
    return true;
  }

  /**
   * Robot r·∫Ω ph·∫£i
   * @returns {boolean} Th√†nh c√¥ng hay kh√¥ng
   */
  turnRight() {
    if (!this.robot) {
      console.warn("‚ö†Ô∏è RobotManager: Robot not initialized");
      return false;
    }

    this.robot.turnRight();
    this.gameState.updateRobotDirection(this.robot.direction);

    console.log(
      `‚úÖ RobotManager: Turned right, now facing ${this.robot.direction}`
    );
    return true;
  }

  /**
   * Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ kh√¥ng
   * @param {number} x - T·ªça ƒë·ªô x
   * @param {number} y - T·ªça ƒë·ªô y
   * @returns {boolean}
   */
  canMoveTo(x, y) {
    // Ki·ªÉm tra bi√™n map
    if (
      x < 0 ||
      y < 0 ||
      x >= this.map.widthInPixels / this.map.tileWidth ||
      y >= this.map.heightInPixels / this.map.tileHeight
    ) {
      return false;
    }

    // Ki·ªÉm tra tile c√≥ th·ªÉ ƒëi qua kh√¥ng
    const tile = this.layer.getTileAt(x, y);
    if (!tile) {
      return false;
    }

    // Ki·ªÉm tra tile properties (c√≥ th·ªÉ m·ªü r·ªông th√™m logic)
    return true;
  }

  /**
   * L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa robot
   * @returns {Object} {x, y}
   */
  getPosition() {
    return this.robot ? this.robot.position : { x: 0, y: 0 };
  }

  /**
   * L·∫•y h∆∞·ªõng hi·ªán t·∫°i c·ªßa robot
   * @returns {string}
   */
  getDirection() {
    return this.robot ? this.robot.direction : "east";
  }

  /**
   * L·∫•y robot sprite
   * @returns {Phaser.GameObjects.Sprite|null}
   */
  getRobotSprite() {
    return this.robot ? this.robot.sprite : null;
  }

  /**
   * Reset robot v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
   * @param {Challenge} challenge - D·ªØ li·ªáu th·ª≠ th√°ch
   */
  reset(challenge) {
    if (!this.robot) return;

    const startPos = challenge.getRobotPosition();
    this.robot.setPosition(startPos.x, startPos.y);
    this.robot.setDirection(challenge.getRobotDirection());

    this.gameState.updateRobotPosition(startPos.x, startPos.y);
    this.gameState.updateRobotDirection(challenge.getRobotDirection());

    console.log(
      `‚úÖ RobotManager: Robot reset to (${startPos.x}, ${
        startPos.y
      }) facing ${challenge.getRobotDirection()}`
    );
  }

  // ===== METHODS T·ª™ ROBOTCONTROLLER =====

  /**
   * C·∫≠p nh·∫≠t depth ƒë·ªÉ robot lu√¥n ·ªü tr√™n c√°c object kh√°c c√πng tile
   */
  updateRobotDepth() {
    if (!this.robot) return;
    this.robot.updateSpriteDepth();
  }

  /**
   * L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa robot (tile coordinates)
   * @returns {Object} {x, y} tile coordinates
   */
  getCurrentPosition() {
    return this.robot ? this.robot.position : { x: 0, y: 0 };
  }

  /**
   * L·∫•y h∆∞·ªõng hi·ªán t·∫°i c·ªßa robot
   * @returns {string} Direction string
   */
  getCurrentDirection() {
    return this.robot ? this.robot.direction : "east";
  }

  /**
   * Ki·ªÉm tra robot c√≥ th·ªÉ di chuy·ªÉn ti·∫øn kh√¥ng
   * @returns {boolean} C√≥ th·ªÉ di chuy·ªÉn hay kh√¥ng
   */
  canMoveForward() {
    if (!this.robot) return false;

    const nextPos = this.robot.getNextPosition();
    return this.canMoveTo(nextPos.x, nextPos.y);
  }

  /**
   * Ki·ªÉm tra robot c√≥ th·ªÉ thu th·∫≠p pin kh√¥ng
   * @returns {boolean} C√≥ th·ªÉ thu th·∫≠p hay kh√¥ng
   */
  canCollectBattery() {
    if (!this.robot) return false;

    const pos = this.robot.position;
    // Logic ki·ªÉm tra pin t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
    // C√≥ th·ªÉ m·ªü r·ªông th√™m logic ki·ªÉm tra pin
    return true;
  }

  /**
   * Ki·ªÉm tra robot c√≥ th·ªÉ ƒë·∫©y h·ªôp kh√¥ng
   * @returns {boolean} C√≥ th·ªÉ ƒë·∫©y hay kh√¥ng
   */
  canPushBox() {
    if (!this.robot) return false;

    const nextPos = this.robot.getNextPosition();
    // Logic ki·ªÉm tra h·ªôp t·∫°i v·ªã tr√≠ ti·∫øp theo
    // C√≥ th·ªÉ m·ªü r·ªông th√™m logic ki·ªÉm tra h·ªôp
    return true;
  }

  /**
   * L·∫•y robot sprite
   * @returns {Phaser.GameObjects.Sprite|null}
   */
  getRobotSprite() {
    return this.robot ? this.robot.sprite : null;
  }

  /**
   * L·∫•y robot model
   * @returns {Robot|null}
   */
  getRobotModel() {
    return this.robot;
  }
}
