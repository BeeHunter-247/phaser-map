import Phaser from "phaser";

/**
 * RobotManager - Qu·∫£n l√Ω robot movement v√† rotation
 *
 * T√°ch t·ª´ Scene.js ƒë·ªÉ t√°ch bi·ªát tr√°ch nhi·ªám
 * X·ª≠ l√Ω t·∫•t c·∫£ logic li√™n quan ƒë·∫øn robot: di chuy·ªÉn, quay, collision detection
 */
export class RobotManager {
  constructor(scene, robot, map, layer) {
    this.scene = scene;
    this.robot = robot;
    this.map = map;
    this.layer = layer;
    this.robotModel = null; // Will be set during initialization
  }

  /**
   * Kh·ªüi t·∫°o robot v·ªõi v·ªã tr√≠ v√† h∆∞·ªõng t·ª´ config
   * @param {Object} objectConfig - Config t·ª´ mapConfigs
   */
  async initialize(objectConfig) {
    if (!this.robot) return;

    // Create a temporary RobotModel for old config-based initialization
    const robotConfig = {
      position: objectConfig?.robot?.tile || { x: 0, y: 0 },
      direction: objectConfig?.robot?.direction || "north",
    };

    const { RobotModel } = await import("../models/RobotModel.js");
    this.robotModel = new RobotModel(robotConfig);
    this.robotModel.setMapReferences(this.map, this.layer);

    this.updateRobotRotation();
    this.updateRobotDepth();

    // Log initial robot state
    console.log(
      `ü§ñ Robot initialized at tile (${this.robotModel.position.x}, ${this.robotModel.position.y})`
    );
    console.log(
      `   Facing: ${this.robotModel.getDirectionName()} (from config: "${
        robotConfig.direction
      }")`
    );
    console.log(`   Robot sprite: ${this.robotModel.getSpriteKey()}`);
  }

  /**
   * Kh·ªüi t·∫°o robot v·ªõi MapModel thay v√¨ config
   * @param {MapModel} mapModel - Map model
   */
  initializeWithModel(mapModel) {
    if (!this.robot) return;

    const robotModel = mapModel.getFirstRobot();
    if (!robotModel) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y robot model trong map!");
      return;
    }

    // Set robot model and map references
    this.robotModel = robotModel;
    this.robotModel.setMapReferences(this.map, this.layer);

    this.updateRobotRotation();
    this.updateRobotDepth();

    // Log initial robot state
    console.log(
      `ü§ñ Robot initialized with model at tile (${this.robotModel.position.x}, ${this.robotModel.position.y})`
    );
    console.log(
      `   Facing: ${this.robotModel.getDirectionName()} (direction index: ${
        this.robotModel.direction
      })`
    );
    console.log(`   Robot sprite: ${robotModel.getSpriteKey()}`);
  }

  /**
   * C·∫≠p nh·∫≠t depth ƒë·ªÉ robot lu√¥n ·ªü tr√™n c√°c object kh√°c c√πng tile
   */
  updateRobotDepth() {
    if (!this.robot) return;
    // Depth theo y: cao h∆°n box (y-1) nh∆∞ng th·∫•p h∆°n pin (s·∫Ω ƒë·∫∑t y+20)
    this.robot.setDepth(this.robot.y + 10);
  }

  /**
   * X√°c ƒë·ªãnh h∆∞·ªõng hi·ªán t·∫°i c·ªßa robot
   * @returns {string} Direction name: 'north', 'east', 'south', 'west'
   */
  getCurrentDirection() {
    return this.robotModel ? this.robotModel.getDirectionName() : "north";
  }

  /**
   * L·∫•y t·ªça ƒë·ªô tile ph√≠a tr∆∞·ªõc robot theo h∆∞·ªõng hi·ªán t·∫°i
   * @returns {Object} {x, y} coordinates of front tile
   */
  getFrontTile() {
    return this.robotModel ? this.robotModel.getFrontTile() : { x: 0, y: 0 };
  }

  /**
   * Ki·ªÉm tra v·ªã tr√≠ c√≥ n·∫±m trong bi√™n c·ªßa b·∫£n ƒë·ªì kh√¥ng
   * @param {number} tileX
   * @param {number} tileY
   * @returns {boolean}
   */
  isWithinBounds(tileX, tileY) {
    return this.robotModel
      ? this.robotModel.isWithinBounds(tileX, tileY)
      : false;
  }

  /**
   * Ki·ªÉm tra tile c√≥ th·ªÉ di chuy·ªÉn ƒë∆∞·ª£c kh√¥ng
   * @param {number} tileX
   * @param {number} tileY
   * @returns {boolean}
   */
  isValidTile(tileX, tileY) {
    return this.robotModel ? this.robotModel.isValidTile(tileX, tileY) : false;
  }

  /**
   * Di chuy·ªÉn th·∫≥ng theo h∆∞·ªõng hi·ªán t·∫°i c·ªßa robot
   * @returns {boolean} Success/failure
   */
  moveForward() {
    if (!this.robotModel) {
      console.error("Robot model not initialized!");
      return false;
    }

    // Use RobotModel to validate and get movement result
    const result = this.robotModel.moveForward();

    console.log(
      `Moving ${this.robotModel.getDirectionName()} to tile (${
        result.newPosition.x
      }, ${result.newPosition.y})`
    );

    // Set moving state
    this.robotModel.isMoving = true;
    const targetPos = this.robotModel.getTileWorldCenter(
      result.newPosition.x,
      result.newPosition.y
    );

    // Tween di chuy·ªÉn (c·ªông th√™m 30 v√†o Y ƒë·ªÉ ph√π h·ª£p v·ªõi MapLoader)
    this.scene.tweens.add({
      targets: this.robot,
      x: targetPos.x,
      y: targetPos.y + 30,
      duration: 300,
      ease: "Power2",
      onUpdate: () => {
        this.updateRobotDepth();
      },
      onComplete: () => {
        this.robotModel.isMoving = false;
        console.log(
          `Arrived at tile (${this.robotModel.position.x}, ${this.robotModel.position.y})`
        );
        this.updateRobotDepth();

        // Ki·ªÉm tra thua sau khi di chuy·ªÉn xong
        if (!result.success) {
          this.scene.lose(result.error);
        }
      },
    });

    return result.success;
  }

  /**
   * Quay tr√°i 90 ƒë·ªô
   * @returns {boolean} Success/failure
   */
  turnLeft() {
    if (!this.robotModel) {
      console.error("Robot model not initialized!");
      return false;
    }

    if (this.robotModel.isMoving) {
      console.log("Cannot turn while moving!");
      return false;
    }

    const oldDirection = this.robotModel.getDirectionName();
    this.robotModel.turnLeft();
    this.updateRobotRotation();
    this.updateRobotDepth();

    console.log(
      `Turned left: ${oldDirection} ‚Üí ${this.robotModel.getDirectionName()}`
    );
    console.log(
      `   Robot sprite changed to: robot_${this.robotModel.getDirectionName()}`
    );
    return true;
  }

  /**
   * Quay ph·∫£i 90 ƒë·ªô
   * @returns {boolean} Success/failure
   */
  turnRight() {
    if (!this.robotModel) {
      console.error("Robot model not initialized!");
      return false;
    }

    if (this.robotModel.isMoving) {
      console.log("Cannot turn while moving!");
      return false;
    }

    const oldDirection = this.robotModel.getDirectionName();
    this.robotModel.turnRight();
    this.updateRobotRotation();
    this.updateRobotDepth();

    console.log(
      `Turned right: ${oldDirection} ‚Üí ${this.robotModel.getDirectionName()}`
    );
    console.log(
      `   Robot sprite changed to: robot_${this.robotModel.getDirectionName()}`
    );
    return true;
  }

  /**
   * Quay l·∫°i sau l∆∞ng 180 ƒë·ªô
   * @returns {boolean} Success/failure
   */
  turnBack() {
    if (!this.robotModel) {
      console.error("Robot model not initialized!");
      return false;
    }

    if (this.robotModel.isMoving) {
      console.log("Cannot turn while moving!");
      return false;
    }

    const oldDirection = this.robotModel.getDirectionName();
    this.robotModel.turnBack();
    this.updateRobotRotation();
    this.updateRobotDepth();

    console.log(
      `Turned around: ${oldDirection} ‚Üí ${this.robotModel.getDirectionName()}`
    );
    console.log(
      `   Robot sprite changed to: robot_${this.robotModel.getDirectionName()}`
    );
    return true;
  }

  /**
   * C·∫≠p nh·∫≠t rotation sprite c·ªßa robot
   */
  updateRobotRotation() {
    if (!this.robot || !this.robotModel) return;

    // Get sprite key from RobotModel
    const spriteKey = this.robotModel.getSpriteKey();

    // L∆∞u v·ªã tr√≠ v√† scale hi·ªán t·∫°i
    const currentX = this.robot.x;
    const currentY = this.robot.y;
    const currentScale = this.robot.scaleX;

    // Thay ƒë·ªïi texture
    this.robot.setTexture(spriteKey);

    // Kh√¥i ph·ª•c v·ªã tr√≠ v√† scale v·ªõi ƒë·ªô cao ƒëi·ªÅu ch·ªânh (gi·ªëng MapLoader)
    // Robot ƒë√£ c√≥ ƒë·ªô cao ƒë√∫ng t·ª´ MapLoader (y + 10), ch·ªâ c·∫ßn gi·ªØ nguy√™n
    this.robot.setPosition(currentX, currentY);
    this.robot.setScale(currentScale);
    this.robot.setOrigin(0.5, 1); // ƒê·∫∑t anchor point ·ªü gi·ªØa d∆∞·ªõi
  }

  /**
   * L·∫•y v·ªã tr√≠ tile hi·ªán t·∫°i c·ªßa robot
   * @returns {Object} {x, y} tile coordinates
   */
  getCurrentTilePosition() {
    return this.robotModel ? this.robotModel.position : { x: 0, y: 0 };
  }

  /**
   * L·∫•y key c·ªßa tile hi·ªán t·∫°i (d√πng cho battery tracking)
   * @returns {string} Tile key format: "x,y"
   */
  getCurrentTileKey() {
    return this.robotModel ? this.robotModel.getCurrentTileKey() : "0,0";
  }

  /**
   * Ki·ªÉm tra robot c√≥ ƒëang di chuy·ªÉn kh√¥ng
   * @returns {boolean}
   */
  isRobotMoving() {
    return this.robotModel ? this.robotModel.isMoving : false;
  }

  /**
   * L·∫•y world center c·ªßa tile
   * @param {number} tileX
   * @param {number} tileY
   * @returns {Object} {x, y} world coordinates
   */
  getTileWorldCenter(tileX, tileY) {
    return this.robotModel
      ? this.robotModel.getTileWorldCenter(tileX, tileY)
      : { x: 0, y: 0 };
  }
}
